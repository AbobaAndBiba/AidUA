generator client {
    provider      = "prisma-client-js"
    output        = "./generated/client"
    binaryTargets = ["native", "windows", "linux-musl"]
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRESQL_URL")
}

model Admin {
    id       String @id
    login    String
    password String
    token    Token?
}

model City {
    id           String        @id
    name         String
    pickupPoints PickupPoint[]
}

model Region {
    id           String        @id
    name         String
    pickupPoints PickupPoint[]
}

model District {
    id           String        @id
    name         String
    pickupPoints PickupPoint[]
}

model Address {
    id           String        @id
    name         String
    pickupPoints PickupPoint[]
}

model Coordinates {
    id          String        @id
    x           Float
    y           Float
    pickupPoint PickupPoint[]
}

model PickupPoint {
    id            String       @id
    name          String
    city          City?        @relation(fields: [cityId], references: [id])
    cityId        String
    region        Region?      @relation(fields: [regionId], references: [id])
    regionId      String
    district      District?    @relation(fields: [districtId], references: [id])
    districtId    String
    address       Address?     @relation(fields: [addressId], references: [id])
    addressId     String
    coordinates   Coordinates? @relation(fields: [coordinatesId], references: [id])
    coordinatesId String
    aid           Aid?         @relation(fields: [aidId], references: [id])
    aidId         String
}

model Aid {
    id           String           @id
    registration String
    phone        String
    author       Author?          @relation(fields: [authorId], references: [id])
    authorId     String
    privileges   PrivilegeToAid[]
    pickupPoints PickupPoint[]
}

model Author {
    id   String @id
    name String
    aids Aid[]
}

model Token {
    admin             Admin?   @relation(fields: [adminId], references: [id])
    adminId           String?  @unique
    accessToken       String   @id
    isActive          Boolean
    lastAuthorization DateTime @default(now())
}

model News {
    id        String   @id
    title     String
    text      String
    image     String?
    link      String
    createdAt DateTime @default(now())
}

model Privilege {
    id   String           @id
    name String
    aids PrivilegeToAid[]
}

model PrivilegeToAid {
    aid         Aid?       @relation(fields: [aidId], references: [id])
    aidId       String
    privilege   Privilege? @relation(fields: [privilegeId], references: [id])
    privilegeId String

    @@id([aidId, privilegeId])
}
